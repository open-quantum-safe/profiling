version: 2.1

parameters:
  new_openssl_commit:
    type: boolean
    default: false

# CircleCI doesn't handle large file sets properly for local builds
# https://github.com/CircleCI-Public/circleci-cli/issues/281#issuecomment-472808051
localCheckout: &localCheckout
  run: |-
    PROJECT_PATH=$(cd ${CIRCLE_WORKING_DIRECTORY}; pwd)
    mkdir -p ${PROJECT_PATH}
    cd /tmp/_circleci_local_build_repo
    git ls-files -z | xargs -0 -s 2090860 tar -c | tar -x -C ${PROJECT_PATH}
    cp -a /tmp/_circleci_local_build_repo/.git ${PROJECT_PATH}

jobs:
  debian_arm64:
    description: Building and pushing ARM64 benchmarking baselin image 
# to be used at CCI if docker doesn't work:
#    machine:
#      image: ubuntu-2004:202101-01
    docker:
#      #- image: debian:stable-slim
      - image: openquantumsafe/ci-debian-buster-amd64
    steps:
#      - run:
#          name: Setup docker and qemu
#          command: |
#            dpkg --add-architecture arm64 && apt -y update && apt -y upgrade && apt -y install qemu-user-static binfmt-support curl docker.io gcc-arm-linux-gnueabi gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu qemu-user-static libssl-dev:arm64
#            # manually get docker if install fails
#            #curl -fsSL https://get.docker.com -o get-docker.sh
#            #chmod u+x get-docker.sh && /root/get-docker.sh
#          workdir:
#            /root
# enable docker if not in machine:
      - setup_remote_docker
      - run:
          name: Check versions
          command: |
            qemu-aarch64-static --version
      - run:
          name: activate multiarch
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes && 
            docker run -it arm64v8/debian:buster-slim uname -a
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - run: uname -a
# enable for CCI pushing:
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN --password-stdin
      - run:
          name: Build and test profiling image
          command: |
            # The CircleCI executor offers 35 cores, but using
            # all of them might exhaust memory
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-perf-arm64 -f Dockerfile-arm64 . &&
            docker run -it oqs-perf-arm64 /opt/test/selftest.sh
          working_directory: perf
      - when:
          condition:
            or:
              # just to test:
              - equal: [ mb-debian, << pipeline.git.branch >> ]
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push all images
                command: |
                  docker tag oqs-multiperf $TARGETNAME/oqs-multiperf &&
                  docker push $TARGETNAME/oqs-multiperf

  debian_x64:
    description: A template for building and pushing OQS performance testing Docker image on Ubuntu Bionic that depend on OQS-OpenSSL
    docker:
      - image: openquantumsafe/ci-ubuntu-focal-x86_64:latest
        auth:
          username: $DOCKER_LOGIN
          password: $DOCKER_PASSWORD
    steps:
      - checkout # change this from "checkout" to "*localCheckout" when running CircleCI locally
      - setup_remote_docker
      - run:
          name: Authenticate to Docker
          command: echo $DOCKER_PASSWORD | docker login --username $DOCKER_LOGIN --password-stdin
      - run:
          name: Build and test profiling image
          command: |
            # The CircleCI executor offers 35 cores, but using
            # all of them might exhaust memory
            docker build --build-arg MAKE_DEFINES="-j 18" -t oqs-perf . &&
            docker run -it oqs-perf /opt/test/selftest.sh
          working_directory: perf
      - when:
          condition:
            or:
              - equal: [ main, << pipeline.git.branch >> ]
              - equal: [ true, << pipeline.parameters.new_openssl_commit >> ]
          steps:
            - run:
                name: Push all images
                command: |
                  docker tag oqs-perf $TARGETNAME/oqs-perf:latest &&
                  docker push $TARGETNAME/oqs-perf:latest 

workflows:
  version: 2.1
  build:
    jobs:
      - debian_x64:
          context: openquantumsafe
      - debian_arm64:
          context: openquantumsafe
